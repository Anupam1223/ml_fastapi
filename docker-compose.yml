version: '3.8'

services:
  db:
    image: postgres:13
    container_name: ml_db
    restart: always
    env_file: 
      - .env
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - pgdata:/var/lib/postgresql/data

  api:
    build: .
    container_name: ml_api
    depends_on:
      - db
      - kafka
    env_file: 
      - .env
    ports:
      - "${API_PORT}:${API_PORT}"
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "${API_PORT}", "--reload"]
    volumes:
      - ./app/models:/app/models
      - ./app/alembic:/app/alembic
      - ./app/alembic.ini:/app/alembic.ini  

  nginx:
    image: nginx:latest
    container_name: ml_nginx
    depends_on:
      - api
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  redis:
    image: redis:latest
    container_name: ml_redis
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ml_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "${ZOOKEEPER_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ml_kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ml_zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ml_kafka:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "ml_kafka:${KAFKA_PORT}", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  prometheus:
    image: prom/prometheus
    container_name: ml_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"

  grafana:
    image: grafana/grafana
    container_name: ml_grafana
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    volumes:
      - grafana-storage:/var/lib/grafana

volumes:
  pgdata:
  grafana-storage: