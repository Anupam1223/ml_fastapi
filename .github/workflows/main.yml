name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linter
      run: |
        black --check .
        isort --check .
        flake8 .

    - name: Run tests
      env:
        DATABASE_URL: postgresql://user:password@localhost:5432/mydatabase
      run: |
        source venv/bin/activate
        pytest tests/

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      run: |
        docker build -t mydockerhub/ml-api .
        docker tag mydockerhub/ml-api:latest mydockerhub/ml-api:${{ github.sha }}
        docker push mydockerhub/ml-api:latest
        docker push mydockerhub/ml-api:${{ github.sha }}

    - name: Deploy to Server
      run: |
        ssh user@server-ip "docker pull mydockerhub/ml-api:latest && docker-compose up -d"
